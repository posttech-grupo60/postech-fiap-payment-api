{"version":3,"file":"C:/postech-fiap-payment-api/src/repositories/MongoDB/MongoDBPaymentRepository.ts","sources":["C:/postech-fiap-payment-api/src/repositories/MongoDB/MongoDBPaymentRepository.ts"],"names":[],"mappings":";;;;;AAAA,mEAA2C;AAC3C,+CAA2D;AAE3D,MAAqB,wBAAwB;IAEzC,KAAK,CAAC,IAAI,CAAC,OAAgB;QACxB,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,IAAI,sBAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QACvC,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAe;QACxB,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,EAAE,GAAG,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA;YACrE,MAAM,MAAM,GAAG,MAAM,sBAAY,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YAChF,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;YAC/B,OAAO,MAAM,CAAC,CAAC,CAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAElC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,KAAK,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,OAAe;QAC1C,MAAM,OAAO,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAG,OAAO,EAAE,CAAC,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAC5D,OAAO,oBAAoB,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;CAGJ;AA9BD,2CA8BC;AACD,MAAM,oBAAoB,GAAG,KAAK,EAAE,QAAkB,EAAE,EAAE;IACxD,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9D,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;IACzB,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IACjC,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAA;IAC1B,OAAO,MAAM,OAAO,CAAC;AACvB,CAAC,CAAA","sourcesContent":["import Payment from \"../../entity/payment\";\r\nimport { IPayment, PaymentModel } from \"./schemas/Payment\";\r\n\r\nexport default class MongoDBPaymentrepository {\r\n\r\n    async save(payment: Payment): Promise<Payment> {\r\n       console.log(\"Parou aqui \" + payment.id);\r\n        await new PaymentModel(payment).save();\r\n        return payment;\r\n    }\r\n\r\n    async update(orderId: string) :  Promise<Payment | null> {\r\n        try {\r\n          const payment = await this.findByPaymentToOrderId(orderId);\r\n          payment.pay = true;\r\n          console.log('Payment Id = ' + payment.id + \" Dados = \" + payment.pay) \r\n          const result = await PaymentModel.findOneAndUpdate({ id: payment.id }, payment);\r\n          console.log(\"Dados \" + result);\r\n          return result ?  payment : null;\r\n          \r\n        } catch (error) {\r\n          throw new Error(\"Erro ao atualizar pedido: \" + error);\r\n        }\r\n    }\r\n\r\n    async findByPaymentToOrderId(orderId: string): Promise<Payment> {\r\n      const payment = await PaymentModel.findOne({ orderId : orderId });\r\n      console.log('Payment' + payment);\r\n      if (!payment) throw new Error(\"Payment to Order not found\");\r\n      return convertModelToObject(payment);\r\n    }\r\n\r\n   \r\n}\r\nconst convertModelToObject = async (iPayment: IPayment) => {\r\n  const payment = new Payment(iPayment.orderId, iPayment.price);\r\n  payment.id = iPayment.id;\r\n  payment.qrCode = iPayment.qrCode;\r\n  payment.pay = iPayment.pay  \r\n  return await payment;\r\n}\r\n"]}