{"version":3,"file":"C:/postech-fiap-payment-api/src/utils/paymentUtil.ts","sources":["C:/postech-fiap-payment-api/src/utils/paymentUtil.ts"],"names":[],"mappings":";;AAEA,MAAqB,WAAW;IAG5B,kCAAkC;IAClC,KAAK,CAAC,kBAAkB,CAAC,UAAgB;QACrC,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,oBAAoB;QAC5C,OAAO,IAAI,QAAQ,CAAC,CAAC,mBAAmB;QACxC,OAAO,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,YAAY;QAC5E,OAAO,IAAI,UAAU,CAAC,CAAC,4BAA4B;QACnD,OAAO,IAAI,SAAS,CAAC,CAAC,oCAAoC;QAC1D,OAAO,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,qBAAqB;QACvF,OAAO,IAAI,QAAQ,CAAC,CAAC,iBAAiB;QACtC,OAAO,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,iCAAiC;QAC/F,OAAO,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS;QACvE,OAAO,IAAI,UAAU,CAAC,CAAC,iCAAiC;QACxD,OAAO,IAAI,MAAM,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,6BAA6B;QAC3E,OAAO,IAAI,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,yBAAyB;QAEnG,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,cAAc,CAAC,OAAgB;QACjC,MAAM,UAAU,GAAG;YACf,OAAO,EAAE,GAAG;YACZ,GAAG,EAAE,oBAAoB;YACzB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,WAAW;YACjB,aAAa,EAAE,aAAa;YAC5B,MAAM,EAAE,OAAO,CAAC,KAAK;YACrB,WAAW,EAAE,sBAAsB,GAAG,OAAO,CAAC,OAAO;SACxD,CAAC;QACF,MAAM,OAAO,GAAG,MAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC;QAE9E,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;CACJ;AArCD,8BAqCC","sourcesContent":["import Payment from \"../entity/payment\";\r\n\r\nexport default class PaymentUtil {\r\n    \r\n    qrData: string | undefined;\r\n    // Função para gerar o payload PIX\r\n    async generatePixPayload(pixPayload : any) {\r\n        let payload = '000201'; // Versão do payload\r\n        payload += '010212'; // Indica chave PIX\r\n        payload += '26530014' + pixPayload.key.length + pixPayload.key; // Chave PIX\r\n        payload += '52040000'; // Indica valor do pagamento\r\n        payload += '5303986'; // Código correspondente à moeda BRL\r\n        payload += '5406' + pixPayload.amount.length + pixPayload.amount; // Valor do pagamento\r\n        payload += '5802BR'; // Código do país\r\n        payload += '5913' + pixPayload.name.length + pixPayload.name; // Nome do beneficiário/recebedor\r\n        payload += '6007' + pixPayload.city.length + pixPayload.city; // Cidade\r\n        payload += '62070503'; // Indica que é uma transação PIX\r\n        payload += '6304' + pixPayload.transactionId; // Identificador da transação\r\n        payload += '62' + pixPayload.description.length + pixPayload.description; // Descrição do pagamento\r\n    \r\n        return payload;\r\n    }\r\n    \r\n    // Função para gerar o QR code\r\n    async generateQRCode(payment: Payment) : Promise<string> {\r\n        const pixPayload = {\r\n            version: '1',\r\n            key: 'chave_pix_recebedo',\r\n            name: 'Fiap',\r\n            city: 'São Paulo',\r\n            transactionId: 'Transaction',\r\n            amount: payment.price,\r\n            description: 'Gerador da ordem de ' + payment.orderId\r\n        };\r\n        const payload = await  this.generatePixPayload(pixPayload);\r\n        this.qrData = '000201' + payload.length.toString().padStart(2, '0') + payload;\r\n        \r\n        return this.qrData;\r\n    }\r\n}\r\n"]}